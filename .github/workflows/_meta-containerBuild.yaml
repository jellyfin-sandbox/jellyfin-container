on:
  workflow_call:
    inputs:
      codeRepository:
        required: true
        type: string
        description: "The jellyfin code repository to package with the selected rpm descriptor (i.e. jellyfin/jellyfin)."
      codeRepositoryRef:
        required: true
        type: string
        description: "The jellyfin code repository ref to package with the selected rpm descriptor (i.e. a given git hash or a git tag)."
      containerSpec:
        type: string
        required: true
        description: "The build context in which to find the metaValues YAML as well as all container context relevant files."
      imageName:
        type: string
        required: true
        description: "The name that the container image should be available under."
      imageTags:
        type: string
        required: true
        description: "A space separated list of tags the container image should be available under."
      imageLabels:
        type: string
        required: false
        description: "A space seperated list of labels to add to the built container image."
      containerfile:
        type: string
        required: true
        description: "The relative path to the Containerfile within the repository."
    secrets:
      ghc_usr:
        required: true
      ghc_tkn:
        required: true
      dh_usr:
        required: false
      dh_tkn:
        required: false
      quay_usr:
        required: false
      quay_tkn:
        required: false

jobs:
  buildContainer:
    runs-on: ubuntu-22.04
    steps:
      - name: "Install qemu dependency"
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: "Checkout Container Repository"
        uses: actions/checkout@v3
        with:
          path: jellyfin-container

      - name: "Checkout Code Repository"
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.codeRepository }}
          ref: ${{ inputs.codeRepositoryRef }}
          path: jellyfin-code

      - name: "Copy container Folder"
        run: cp -r jellyfin-container/${{ inputs.containerSpec }}/* jellyfin-code

      - name: "Build Container Image"
        run: |-
          set -ex;

          IMAGE_LABELS=""

          for LABEL in ${{ inputs.imageLabels }}; do
            IMAGE_LABELS="--label ${LABEL} ${IMAGE_LABELS}"
          done

          docker buildx build \
            --output type=oci,dest=${{ github.workspace }}/${{ inputs.containerSpec }}.oci.tar \
            --file "jellyfin-code/${{ inputs.containerfile }}" \
            --platform linux/amd64,linux/arm64/v8,linux/arm/v7 \
            ${IMAGE_LABELS} \
            jellyfin-code

      - name: TEST
        run: |-
          podman image ls
          podman image import ${{ github.workspace }}/${{ inputs.containerSpec }}.oci.tar
          podman image ls

#      - name: "Upload OCI Artifact"
#        uses: actions/upload-artifact@v3
#        with:
#          name: ${{ inputs.containerSpec }}-oci
#          path: ${{ inputs.containerSpec }}.oci.tar
#          if-no-files-found: error

#      - name: "Push Container Image to ghcr.io"
#        uses: redhat-actions/push-to-registry@v2.6
#        with:
#          image: ${{ inputs.imageName }}
#          tags: ${{ inputs.imageTags }}
#          registry: ghcr.io/${{ github.repository_owner }}
#          # ONLY works if this repo has write access on the ghcr package
#          username: ${{ secrets.ghc_usr }}
#          password: ${{ secrets.ghc_tkn }}
