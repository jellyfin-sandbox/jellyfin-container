# https://hub.docker.com/_/microsoft-dotnet-sdk
# https://github.com/containers/buildah/commit/bee0a1ff2ef91dc819d28317d7f20cf946b1dc25
# https://github.com/containers/buildah/blob/d6fd289adb59c67b1a35cfcc157d4e0fa83d8da3/tests/bud/multiarch/Dockerfile.built-in-args
# https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-publish
# https://learn.microsoft.com/en-us/dotnet/core/rid-catalog

FROM --platform=${BUILDPLATFORM} mcr.microsoft.com/dotnet/sdk:6.0.403-bullseye-slim AS build

# overwritten automaticaly if properly used with buildx or buildah cross --platform build
ARG TARGETARCH=""

COPY . /src/jellyfin-server

WORKDIR /src/jellyfin-server

RUN DOTNET_RUNTIME=""\
    && set -ex \
    && case "${TARGETARCH}" in \
        amd64) DOTNET_RUNTIME='linux-x64';; \
        arm64) DOTNET_RUNTIME='linux-arm64';; \
        armhf) DOTNET_RUNTIME='linux-arm';; \
        *) echo "ERR: ${TARGETARCH} unsupported" && exit 1;; \
    esac \
    && mkdir -p /app/jellyfin-server \
    && dotnet publish Jellyfin.Server \
        --configuration Release \
        --self-contained true \
        --runtime ${DOTNET_RUNTIME} \
        --output /app/jellyfin-server \
        --nologo \
        -p:DebugSymbols=false \
        -p:DebugType=none \
        -p:UseAppHost=true

FROM docker.io/library/debian:bullseye-20221205-slim

# Default environment variables for the Jellyfin invocation
ENV DOTNET_CLI_TELEMETRY_OPTOUT="true" \
    DOTNET_SYSTEM_GLOBALIZATION_INVARIANT="true" \
    TZ="Etc/UTC" \
    LC_ALL="en_US.UTF-8" \
    LANG="en_US.UTF-8" \
    LANGUAGE="en_US:en" \
    JELLYFIN_MEDIA_DIR="/media" \
    JELLYFIN_DATA_DIR="/config" \
    JELLYFIN_CACHE_DIR="/cache" \
    JELLYFIN_CONFIG_DIR="/config/config" \
    JELLYFIN_LOG_DIR="/config/log" \
    JELLYFIN_FFMPEG="/usr/lib/jellyfin-ffmpeg/ffmpeg" \
    APP_DIR="/opt/jellyfin/jellyfin-server" \
    # https://github.com/NVIDIA/nvidia-docker/wiki/Installation-(Native-GPU-Support)
    NVIDIA_VISIBLE_DEVICES="all" \
    NVIDIA_DRIVER_CAPABILITIES="compute,video,utility"

ARG DEBIAN_FRONTEND="noninteractive"
# https://github.com/intel/compute-runtime/releases
ARG GMMLIB_VERSION=22.2.0
ARG IGC_VERSION=1.0.12149.1
ARG NEO_VERSION=22.39.24347
ARG LEVEL_ZERO_VERSION=1.3.24347

# Install dependencies:
# (amd64 only) mesa-va-drivers: needed for AMD VAAPI. Mesa >= 20.1 is required for HEVC transcoding.
RUN ARCH="" \
    && EXTRA_ARCH_PACKAGES="" \
    && dpkgArch="$(dpkg --print-architecture)" \
    && case "${dpkgArch##*-}" in \
        amd64) ARCH='amd64' && EXTRA_ARCH_PACKAGES='mesa-va-drivers';; \
        arm64) ARCH='arm64';; \
        armhf) ARCH='armhf';; \
    esac \
    && apt-get update -yqq \
    && apt-get install -yqq --no-install-recommends --no-install-suggests \
        ca-certificates \
        gnupg \
        curl \
        apt-transport-https \
    && curl -fsSL https://repo.jellyfin.org/jellyfin_team.gpg.key | gpg --dearmor -o /etc/apt/trusted.gpg.d/debian-jellyfin.gpg \
    && echo "deb [arch=${ARCH}] https://repo.jellyfin.org/debian bullseye main" > /etc/apt/sources.list.d/jellyfin.list \
    && cat /etc/apt/sources.list.d/jellyfin.list \
    && apt-get update -yqq \
    && apt-get install -yqq --no-install-recommends --no-install-suggests \
        jellyfin-ffmpeg5 \
        openssl \
        locales \
        libfontconfig1 \
        libfreetype6 \
        ${EXTRA_ARCH_PACKAGES} \
    \
    && if [[ "${ARCH}" == 'amd64' ]]; then \
    # Intel VAAPI Tone mapping dependencies:
    # Prefer NEO to Beignet since the latter one doesn't support Comet Lake or newer for now.
    # Do not use the intel-opencl-icd package from repo since they will not build with RELEASE_WITH_REGKEYS enabled.
        mkdir /tmp/intel-cr \
        && curl -fsSLO --output-dir /tmp/intel-cr "https://github.com/intel/compute-runtime/releases/download/${NEO_VERSION}/libigdgmm12_${GMMLIB_VERSION}_amd64.deb"  \
        && curl -fsSLO --output-dir /tmp/intel-cr "https://github.com/intel/intel-graphics-compiler/releases/download/igc-${IGC_VERSION}/intel-igc-core_${IGC_VERSION}_amd64.deb" \
        && curl -fsSLO --output-dir /tmp/intel-cr "https://github.com/intel/intel-graphics-compiler/releases/download/igc-${IGC_VERSION}/intel-igc-opencl_${IGC_VERSION}_amd64.deb" \
        && curl -fsSLO --output-dir /tmp/intel-cr "https://github.com/intel/compute-runtime/releases/download/${NEO_VERSION}/intel-opencl-icd_${NEO_VERSION}_amd64.deb" \
        && curl -fsSLO --output-dir /tmp/intel-cr "https://github.com/intel/compute-runtime/releases/download/${NEO_VERSION}/intel-level-zero-gpu_${LEVEL_ZERO_VERSION}_amd64.deb" \
        && dpkg -i /tmp/intel-cr/*.deb \
        && rm -rf /tmp/intel-cr; \
    fi \
    && apt-get remove -yqq gnupg apt-transport-https \
    && apt-get clean autoclean -yqq \
    && apt-get autoremove -yqq \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p "${JELLYFIN_MEDIA_DIR}" "${JELLYFIN_DATA_DIR}" "${JELLYFIN_CACHE_DIR}" \
    && chmod 777 "${JELLYFIN_MEDIA_DIR}" "${JELLYFIN_DATA_DIR}" "${JELLYFIN_CACHE_DIR}" \
    && sed -i -e 's;# en_US.UTF-8 UTF-8;en_US.UTF-8 UTF-8;' /etc/locale.gen \
    && locale-gen

COPY --from=build /app/jellyfin-server ${APP_DIR}

EXPOSE 8096/tcp
VOLUME ["${JELLYFIN_MEDIA_DIR}", "${JELLYFIN_DATA_DIR}", "${JELLYFIN_CACHE_DIR}"]
ENTRYPOINT ["${APP_DIR}/jellyfin"]
CMD ["--nowebclient"]

# Open Container Initiative metadata labels
LABEL \
    org.opencontainers.image.vendor="Jellyfin project" \
    org.opencontainers.image.title="Jellyfin - The Free Software Media System - Server" \
    org.opencontainers.image.description="Official Jellyfin server container image" \
    org.opencontainers.image.url="https://jellyfin.org/" \
    org.opencontainers.image.licenses="GPL-2.0"
